#+STARTUP: showeverything
* space war

** bullets
*** bullet attributes
**** speed
     every bullet has a speed in pixels per frame, no matter which direction it goes
**** direction
     this attribute is in degree, which PI is 180(for the rotation function)
**** damage
     for when the bullet collide with blocks, enemies etc. the damage it makes
**** image and rect
     hold the picture and its rect, modified by load_image() and rotation.
**** original
     hold original image, make the calculation of rotation degree much easier
**** frame_counter
     indicate how many frames this bullet has existed. can be used to indicate
     the direction of moving and the speed bullet have(but this will be nonsense
     when we use script to manage out moving)
**** judgement
**** TODO maybe a pack of judgement type and judgement scope. I'm not sure which to use.
     circle judgement may contain a center position and a radius,
     polygon judgement may contain a center and the list of points
*** functions
**** update()
     update states of bullet, almost done by _move()
**** _move()
     do things such as rotate the picture of bullet, modify the picture rectangle
***** TODO can be managed by script???

** plane
*** plane attributes
**** image, rect
     hold the picture of plane and the rect it in
     can be modified when moving
**** original
     hold a copy of original image, can be useful when rotate the plane in specific
     degree
**** head_direction
     indicate which direction our plane heads for currently, is used in rotating the pic
     of plane
**** normal_speed
     the moving speed with L_SHIFT unholding
**** slow_speed
     the moving speed with L_SHIFT holding
**** moving_mode
     indicate plane's moving mode, NORMAL_MODE or SLOW_MODE(these two integer is defined in
     constants.py)
**** TODO derive from plane to create more planes
     I have no idea now...
     this time, there is no need to use class plane. I use class player and class enemy to do the work.
*** functions
**** _generate_move
     given a direction and a moving mode, generate a tuple how many pixels plane moves
     in x or y coodinary
***** about eight directions
      up->direction==0 and for every 45 degrees goes clockwise, direction increased by 1
**** _move()
***** generate the tuple of movement
***** rotate the picture
***** resize and move the rect
***** check if the plane is partly outside the game window
**** _shoot()
     different planes can have different shooting mode , so this function can be more complicated in
     derived classes
*** functions about plane, but not in the class
**** key_press_process_plane(plane,keystate)
     keystate is the list of pressed button. this function can
***** process the arrows and set themoving direction of plane.
***** check the shooting button
      return the bullet_buffer of this frame to add these bullets to the bullets pool.
***** check slowdown button and set the mode of plane


** circle_bullet
*** attributes
**** judgement
     CIRCLE_JUDGEMENT or POLYGON_JUDGEMENT, there may be more types in the future
**** collide detection
it is very easy to use given functions! great!I use pygame.sprite.spritecollide to process collides


** player
*** _generate_move()
    this function can generate a moving tuple for _move(), return the tuple. Simply motivated by _move()
*** _get_hit()
when the player get hitted, this function is called. when the player is in the status of undefeated, life cannot be decreased. only when the undefeated_frame_remain is zero, life decreased by 1(this is completed by _biu())

* 敌人的运行脚本
在何时（多少帧）从什么地方以什么方向出现，之后发射什么类型的弹幕
* 自机的replay
按照帧存储按键集重新运行游戏？比想象中的要难一些。。。
* 对话设计，人物的显现，淡出（pygame中有设置alpha值的选项吗？看看去）

在游戏的循环中每一帧必须要加入时间的处理，否则会卡顿，不响应按键。原因，不知道
